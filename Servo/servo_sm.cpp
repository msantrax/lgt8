//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : servo.sm
//



//Externs



#include "Servo.h"
#include "servo_sm.h"

using namespace statemap;

namespace antares
{
    // Static class declarations.
    ServoAdm_ColdStart ServoAdm::ColdStart("ServoAdm::ColdStart", 0);
    ServoAdm_Idle ServoAdm::Idle("ServoAdm::Idle", 1);

    void ServoState::JobDone(ServoContext& context)
    {
        Default(context);
    }

    void ServoState::Tick(ServoContext& context)
    {
        Default(context);
    }

    void ServoState::Default(ServoContext& context)
    {
        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

    }

    void ServoAdm_Default::JobDone(ServoContext& context)
    {
        Servo& ctxt = context.getOwner();

        ServoState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.JobisDone();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

    }

    void ServoAdm_ColdStart::Entry(ServoContext& context)

{
        Servo& ctxt = context.getOwner();

        //ctxt.ShowStatus((char*)"ColdStart\n\r");
        ctxt.SetupHardware();
        ctxt.TickCallback();
    }

    void ServoAdm_ColdStart::Tick(ServoContext& context)
    {

        context.getState().Exit(context);
        context.setState(ServoAdm::Idle);
        context.getState().Entry(context);

    }

    void ServoAdm_Idle::Entry(ServoContext& context)

{
        Servo& ctxt = context.getOwner();

        ctxt.ClearQueue();
    }

    void ServoAdm_Idle::Tick(ServoContext& context)
    {
        Servo& ctxt = context.getOwner();

        ServoState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.ToggleFlag();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

    }
}

//
// Local variables:
//  buffer-read-only: t
// End:
//
